<?php

namespace OvidiuGalatan\McpAdapterExample\Abilities\Security;

use OvidiuGalatan\McpAdapterExample\Abilities\RegistersAbility;

class ScanMalware implements RegistersAbility {

	public static function register(): void {
		wp_register_ability(
			'core/scan-malware',
			array(
				'label'               => 'Scan Malware',
				'description'         => 'Perform basic malware and security scanning of WordPress files and database.',
				'input_schema'        => array(
					'type'       => 'object',
					'properties' => array(
						'scan_files' => array(
							'type'        => 'boolean',
							'description' => 'Scan WordPress files for suspicious content.',
							'default'     => true,
						),
						'scan_database' => array(
							'type'        => 'boolean',
							'description' => 'Scan database for suspicious entries.',
							'default'     => true,
						),
						'deep_scan' => array(
							'type'        => 'boolean',
							'description' => 'Perform more thorough scanning (slower).',
							'default'     => false,
						),
						'max_files' => array(
							'type'        => 'integer',
							'description' => 'Maximum number of files to scan (0 for unlimited).',
							'default'     => 1000,
							'minimum'     => 0,
						),
					),
					'additionalProperties' => false,
				),
				'output_schema'       => array(
					'type'       => 'object',
					'properties' => array(
						'summary' => array(
							'type'       => 'object',
							'properties' => array(
								'files_scanned'     => array( 'type' => 'integer' ),
								'suspicious_files'  => array( 'type' => 'integer' ),
								'database_entries'  => array( 'type' => 'integer' ),
								'suspicious_db'     => array( 'type' => 'integer' ),
								'overall_status'    => array( 'type' => 'string' ),
								'scan_duration'     => array( 'type' => 'number' ),
							),
						),
						'file_issues' => array(
							'type'  => 'array',
							'items' => array(
								'type'       => 'object',
								'properties' => array(
									'file'        => array( 'type' => 'string' ),
									'issue_type'  => array( 'type' => 'string' ),
									'severity'    => array( 'type' => 'string' ),
									'description' => array( 'type' => 'string' ),
									'line'        => array( 'type' => 'integer' ),
								),
							),
						),
						'database_issues' => array(
							'type'  => 'array',
							'items' => array(
								'type'       => 'object',
								'properties' => array(
									'table'       => array( 'type' => 'string' ),
									'issue_type'  => array( 'type' => 'string' ),
									'severity'    => array( 'type' => 'string' ),
									'description' => array( 'type' => 'string' ),
									'count'       => array( 'type' => 'integer' ),
								),
							),
						),
						'recommendations' => array(
							'type'  => 'array',
							'items' => array( 'type' => 'string' ),
						),
						'message' => array( 'type' => 'string' ),
					),
				),
				'permission_callback' => array( self::class, 'check_permission' ),
				'execute_callback'    => array( self::class, 'execute' ),
				'meta'                => array(
					'categories' => array( 'security', 'system' ),
					'annotations' => array(
						'audience'        => array( 'user', 'assistant' ),
						'priority'        => 0.6,
						'readOnlyHint'    => true,
						'destructiveHint' => false,
						'idempotentHint'  => true,
						'openWorldHint'   => false,
					),
				),
			)
		);
	}

	public static function check_permission(): bool {
		return current_user_can( 'manage_options' );
	}

	public static function execute( array $input ): array {
		$scan_files = $input['scan_files'] ?? true;
		$scan_database = $input['scan_database'] ?? true;
		$deep_scan = $input['deep_scan'] ?? false;
		$max_files = $input['max_files'] ?? 1000;

		$start_time = microtime( true );

		$summary = array(
			'files_scanned'    => 0,
			'suspicious_files' => 0,
			'database_entries' => 0,
			'suspicious_db'    => 0,
			'overall_status'   => 'clean',
			'scan_duration'    => 0,
		);

		$file_issues = array();
		$database_issues = array();
		$recommendations = array();

		// Scan files if requested
		if ( $scan_files ) {
			$file_results = self::scan_files( $deep_scan, $max_files );
			$summary['files_scanned'] = $file_results['files_scanned'];
			$summary['suspicious_files'] = count( $file_results['issues'] );
			$file_issues = $file_results['issues'];
		}

		// Scan database if requested
		if ( $scan_database ) {
			$db_results = self::scan_database( $deep_scan );
			$summary['database_entries'] = $db_results['entries_scanned'];
			$summary['suspicious_db'] = count( $db_results['issues'] );
			$database_issues = $db_results['issues'];
		}

		// Determine overall status
		if ( $summary['suspicious_files'] > 0 || $summary['suspicious_db'] > 0 ) {
			if ( $summary['suspicious_files'] > 5 || $summary['suspicious_db'] > 3 ) {
				$summary['overall_status'] = 'critical';
			} else {
				$summary['overall_status'] = 'warning';
			}
		}

		// Generate recommendations
		if ( $summary['overall_status'] === 'critical' ) {
			$recommendations[] = 'Multiple suspicious files or database entries detected. Immediate security review recommended.';
			$recommendations[] = 'Consider running a full security scan with a professional security plugin.';
		} elseif ( $summary['overall_status'] === 'warning' ) {
			$recommendations[] = 'Some suspicious content detected. Review flagged items carefully.';
		}

		$recommendations[] = 'Keep WordPress core, themes, and plugins updated regularly.';
		$recommendations[] = 'Use strong passwords and limit login attempts.';
		$recommendations[] = 'Consider implementing a Web Application Firewall (WAF).';

		$summary['scan_duration'] = round( microtime( true ) - $start_time, 2 );

		return array(
			'summary'          => $summary,
			'file_issues'      => $file_issues,
			'database_issues'  => $database_issues,
			'recommendations'  => $recommendations,
			'message'          => sprintf(
				'Security scan completed in %s seconds. Scanned %d files and %d database entries. Status: %s',
				$summary['scan_duration'],
				$summary['files_scanned'],
				$summary['database_entries'],
				$summary['overall_status']
			),
		);
	}

	private static function scan_files( bool $deep_scan, int $max_files ): array {
		$issues = array();
		$files_scanned = 0;

		// Define suspicious patterns
		$suspicious_patterns = array(
			'eval\s*\(' => array( 'type' => 'code_injection', 'severity' => 'high' ),
			'base64_decode\s*\(' => array( 'type' => 'obfuscation', 'severity' => 'medium' ),
			'exec\s*\(' => array( 'type' => 'command_execution', 'severity' => 'high' ),
			'system\s*\(' => array( 'type' => 'command_execution', 'severity' => 'high' ),
			'shell_exec\s*\(' => array( 'type' => 'command_execution', 'severity' => 'high' ),
			'file_get_contents\s*\(\s*[\'"]https?://' => array( 'type' => 'remote_inclusion', 'severity' => 'medium' ),
			'curl_exec\s*\(' => array( 'type' => 'remote_request', 'severity' => 'low' ),
			'<\?php\s+/\*[a-zA-Z0-9+/=]{50,}\*/' => array( 'type' => 'obfuscated_header', 'severity' => 'high' ),
		);

		// Directories to scan
		$scan_dirs = array(
			WP_CONTENT_DIR . '/themes',
			WP_CONTENT_DIR . '/plugins',
			WP_CONTENT_DIR . '/uploads',
		);

		if ( $deep_scan ) {
			$scan_dirs[] = ABSPATH . 'wp-includes';
			$scan_dirs[] = ABSPATH . 'wp-admin';
		}

		foreach ( $scan_dirs as $dir ) {
			if ( ! is_dir( $dir ) ) {
				continue;
			}

			$iterator = new \RecursiveIteratorIterator(
				new \RecursiveDirectoryIterator( $dir ),
				\RecursiveIteratorIterator::LEAVES_ONLY
			);

			foreach ( $iterator as $file ) {
				if ( $max_files > 0 && $files_scanned >= $max_files ) {
					break 2;
				}

				if ( ! $file->isFile() ) {
					continue;
				}

				$extension = strtolower( $file->getExtension() );
				if ( ! in_array( $extension, array( 'php', 'js', 'html', 'htm' ) ) ) {
					continue;
				}

				$filepath = $file->getPathname();
				$content = file_get_contents( $filepath );
				
				if ( $content === false ) {
					continue;
				}

				$files_scanned++;

				// Check for suspicious patterns
				foreach ( $suspicious_patterns as $pattern => $info ) {
					if ( preg_match( '/' . $pattern . '/i', $content, $matches, PREG_OFFSET_CAPTURE ) ) {
						$line_number = substr_count( substr( $content, 0, $matches[0][1] ), "\n" ) + 1;
						
						$issues[] = array(
							'file'        => str_replace( ABSPATH, '', $filepath ),
							'issue_type'  => $info['type'],
							'severity'    => $info['severity'],
							'description' => self::get_issue_description( $info['type'] ),
							'line'        => $line_number,
						);
					}
				}

				// Check file size anomalies
				if ( $file->getSize() > 1048576 ) { // 1MB
					$issues[] = array(
						'file'        => str_replace( ABSPATH, '', $filepath ),
						'issue_type'  => 'large_file',
						'severity'    => 'low',
						'description' => 'Unusually large file size may indicate malicious content',
						'line'        => 0,
					);
				}
			}
		}

		return array(
			'files_scanned' => $files_scanned,
			'issues'        => $issues,
		);
	}

	private static function scan_database( bool $deep_scan ): array {
		global $wpdb;

		$issues = array();
		$entries_scanned = 0;

		// Suspicious patterns in database
		$suspicious_db_patterns = array(
			'<script[^>]*>' => array( 'type' => 'xss_script', 'severity' => 'high' ),
			'javascript:' => array( 'type' => 'javascript_injection', 'severity' => 'medium' ),
			'eval\s*\(' => array( 'type' => 'code_injection', 'severity' => 'high' ),
			'base64_decode' => array( 'type' => 'obfuscation', 'severity' => 'medium' ),
			'<iframe[^>]*>' => array( 'type' => 'iframe_injection', 'severity' => 'medium' ),
		);

		// Tables to scan
		$tables_to_scan = array(
			$wpdb->posts => array( 'post_content', 'post_excerpt' ),
			$wpdb->options => array( 'option_value' ),
			$wpdb->postmeta => array( 'meta_value' ),
			$wpdb->comments => array( 'comment_content' ),
		);

		if ( $deep_scan ) {
			$tables_to_scan[ $wpdb->usermeta ] = array( 'meta_value' );
		}

		foreach ( $tables_to_scan as $table => $columns ) {
			foreach ( $columns as $column ) {
				$results = $wpdb->get_results(
					$wpdb->prepare(
						"SELECT COUNT(*) as total FROM {$table} WHERE {$column} IS NOT NULL AND {$column} != ''"
					)
				);

				if ( ! empty( $results ) ) {
					$entries_scanned += (int) $results[0]->total;
				}

				// Check for suspicious patterns
				foreach ( $suspicious_db_patterns as $pattern => $info ) {
					$count = $wpdb->get_var(
						$wpdb->prepare(
							"SELECT COUNT(*) FROM {$table} WHERE {$column} REGEXP %s",
							$pattern
						)
					);

					if ( $count > 0 ) {
						$issues[] = array(
							'table'       => str_replace( $wpdb->prefix, '', $table ),
							'issue_type'  => $info['type'],
							'severity'    => $info['severity'],
							'description' => self::get_db_issue_description( $info['type'] ),
							'count'       => (int) $count,
						);
					}
				}
			}
		}

		return array(
			'entries_scanned' => $entries_scanned,
			'issues'          => $issues,
		);
	}

	private static function get_issue_description( string $type ): string {
		$descriptions = array(
			'code_injection'     => 'Potential code injection vulnerability detected',
			'obfuscation'        => 'Obfuscated code that may hide malicious content',
			'command_execution'  => 'Code that can execute system commands',
			'remote_inclusion'   => 'Code that includes remote files',
			'remote_request'     => 'Code that makes external HTTP requests',
			'obfuscated_header'  => 'Obfuscated PHP code in file header',
			'large_file'         => 'File is unusually large for its type',
		);

		return $descriptions[ $type ] ?? 'Unknown security issue';
	}

	private static function get_db_issue_description( string $type ): string {
		$descriptions = array(
			'xss_script'          => 'Script tags that may indicate XSS attacks',
			'javascript_injection' => 'JavaScript code injection attempts',
			'code_injection'      => 'Code injection in database content',
			'obfuscation'         => 'Obfuscated content in database',
			'iframe_injection'    => 'Suspicious iframe tags',
		);

		return $descriptions[ $type ] ?? 'Unknown database security issue';
	}
}
